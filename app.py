import os
import hmac
import hashlib
import urllib.parse
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

app = FastAPI()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
print("üöÄ Starting FastAPI app...")

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π origin
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
if not BOT_TOKEN:
    print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
def is_valid_init_data(init_data: str, bot_token: str) -> bool:
    print(f"üîê –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData:\n{init_data}\n")

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        parsed = dict(urllib.parse.parse_qsl(init_data))
        print(f"üì¶ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{parsed}\n")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
        received_hash = parsed.pop("hash", None)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π hash: {received_hash}")
        if not received_hash:
            print("‚ùå Hash –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ initData")
            return False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º data_check_string
        sorted_items = sorted(parsed.items())
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted_items)
        print(f"üìÑ Data check string:\n{data_check_string}\n")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è secret_key –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        secret_key = hmac.new(bot_token.encode(), b"WebAppData", hashlib.sha256).digest()
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–±–∞–π—Ç—ã): {secret_key.hex()}\n")

        # –•—ç—à–∏—Ä—É–µ–º data_check_string
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        print(f"üßÆ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash: {calculated_hash}")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö—ç—à–µ–π
        is_valid = calculated_hash == received_hash
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {'–≤–∞–ª–∏–¥–Ω—ã–π' if is_valid else '–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}\n")
        return is_valid

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ is_valid_init_data: {e}")
        return False


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram WebApp
@app.post("/webapp")
async def handle_webapp(request: Request):
    try:
        body = await request.json()
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", body)

        query_id = body.get("query_id")
        init_data = body.get("initData")

        if not query_id or not init_data:
            print("‚ö†Ô∏è –ù–µ—Ç query_id –∏–ª–∏ initData")
            return JSONResponse(content={"ok": False, "error": "Missing query_id or initData"}, status_code=400)

        if not is_valid_init_data(init_data, BOT_TOKEN):
            print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å initData –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            return JSONResponse(content={"ok": False, "error": "Invalid initData"}, status_code=403)

        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return {"ok": True, "query_id": query_id, "init_data": init_data}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return JSONResponse(content={"ok": False, "error": "Server error"}, status_code=500)
